#-------------------------------------------------------------
# Personal Aliases
#-------------------------------------------------------------

alias du='du -kh'    # Makes a more readable output.
alias df='df -kTh'

#-------------------------------------------------------------
# The 'ls' family (this assumes you use a recent GNU ls).
#-------------------------------------------------------------
# Add colors for filetype and  human-readable sizes by default on 'ls':
alias ls='ls -h --color'
alias lx='ls -lXB'         #  Sort by extension.
alias lk='ls -lSr'         #  Sort by size, biggest last.
alias lt='ls -ltr'         #  Sort by date, most recent last.
alias lc='ls -ltcr'        #  Sort by/show change time,most recent last.
alias lu='ls -ltur'        #  Sort by/show access time,most recent last.
alias tree='tree -C'       #  Nice alternative to 'recursive ls' ...
#-------------------------------------------------------------
# The ubiquitous 'll': directories first, with alphanumeric sorting:
#-------------------------------------------------------------
alias ll="ls -lv --group-directories-first"
alias lm='ll |more'        #  Pipe through 'more'
alias lr='ll -R'           #  Recursive ls.
alias la='ll -A'           #  Show hidden files.

#-------------------------------------------------------------
# Navigation
#-------------------------------------------------------------
# Personal
alias pject='cd ~/Projects'
alias prog='cd ~/Programs'
# Work
alias mm='cd ~/Documents/natura/mm'
alias ucom='cd ~/Documents/ucom'

# Directories
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'

#-------------------------------------------------------------
# Git 
#-------------------------------------------------------------
alias gs='git status'
alias gss='git submodule status'
alias gsu='git submodule update'
alias gf='git fetch'
alias gfa='git fetch --all'
alias ggh='git log --graph'
alias ggp="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %Cblue<%an>%Creset' --abbrev-commit --date=relative --all"
alias gno='git log --name-only'
alias gd='git diff'
alias gkk='gitk --all &'
alias glp='git log -p'
alias gtl='git stash list'
alias gbdr='git push origin --delete '
alias glod='git log --oneline --decorate '
alias gml='git log --oneline --grep "Merge " '

# Functions
# Description:
#   Compares two branches
#
# Arguments:
#   Branch to be compared
# 
# Usage:
#   git-compare branchA branchB
function git-compare {
  if [ -z "$2" ]; then
    # display usage if no parameters given
    echo "Missing params"
    echo "Usage: git-compare branchA branchB"
  else 
    branchA="origin/$1"
    branchB="origin/$2"
    comparing="$branchB..$branchA"
    echo "Commits in '$branchA' and not in '$branchB'"
    echo "Comparing: $comparing"
    echo ""
    git log --oneline --grep "Merge " "$comparing"
  fi
}

# Description:
#   Here is how you would transplant a topic branch based on one branch to another, 
#   to pretend that you forked the topic branch from the latter branch, using rebase --onto.
#   First letâ€™s assume your topic is based on branch next. 
#   For example, a feature developed in topic depends on some functionality which is found in next.
# 
# o---o---o---o---o  master
#     \
#      o---o---o---o---o  next
#                       \
#                        o---o---o  topic
# We want to make topic forked from branch master; for example, because the functionality on which topic depends was merged into the more stable master branch. We want our tree to look like this:
# 
#    o---o---o---o---o  master
#        |            \
#        |             o'--o'--o'  topic
#         \
#          o---o---o---o---o  next
# We can get this using the following command:
# 
# git rebase --onto master next topic
#
# Arguments:
#   New base, old base adn the branch to be moved.
# 
# Usage:
#   git-rebase-move-parent newBase oldBase feature/branch
function git-rebase-move-parent {
  if [ -z "$3" ]; then
    # display usage if no parameters given
    echo "Missing params"
    echo "Usage: git-rebase-move-parent newBase oldBase feature/branch"
  else 
    newBase="$1"
    oldBase="$2"
    featureBranch="$3"
    echo "Moving commits from '$featureBranch' starting on '$oldBase' onto '$newBase'"
    echo ""
    git rebase --onto newBase oldBase featureBranch
  fi
}


#-------------------------------------------------------------
# Programs
#-------------------------------------------------------------


#-------------------------------------------------------------
# System
#-------------------------------------------------------------
alias psg='ps aux | grep -v grep | grep -i -e VSZ -e'
alias update='sudo apt-get update'
alias upgrade='sudo apt-get upgrade'
alias dualDisplay='~/./.screenlayout/dualDisplay.sh'
alias oneDisplay='~/./.screenlayout/oneDisplay.sh'

alias shoot-windows='xfce4-screenshooter -w -s $HOME/Screenshooter/'
alias shoot-region='xfce4-screenshooter -r -s $HOME/Screenshooter/'

alias running-services='sudo systemctl list-unit-files --type service --all'
alias osVersion='lsb_release -a'
# Functions
# Description:
#   Extract files from compacted files.
#
# Arguments:
#   File to be uncompressed.
# 
# Usage:
#   extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>
function extract {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
    if [ -f $1 ]; then
        NAME=${1%.*}
        mkdir $NAME && cd $NAME
        case $1 in
          *.tar.bz2)   tar xvjf ../$1    ;;
          *.tar.gz)    tar xvzf ../$1    ;;
          *.tar.xz)    tar xvJf ../$1    ;;
          *.lzma)      unlzma ../$1      ;;
          *.bz2)       bunzip2 ../$1     ;;
          *.rar)       unrar x -ad ../$1 ;;
          *.gz)        gunzip ../$1      ;;
          *.tar)       tar xvf ../$1     ;;
          *.tbz2)      tar xvjf ../$1    ;;
          *.tgz)       tar xvzf ../$1    ;;
          *.zip)       unzip ../$1       ;;
          *.Z)         uncompress ../$1  ;;
          *.7z)        7z x ../$1        ;;
          *.7zip)      7z x ../$1        ;;
          *.xz)        unxz ../$1        ;;
          *.exe)       cabextract ../$1  ;;
          *)           echo "extract: '$1' - unknown archive method" ;;
        esac
    else
        echo "$1 - file does not exist"
    fi
  fi
}

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
# Append this line to enable fzf keybindings for Bash:
source /usr/share/doc/fzf/examples/key-bindings.bash

# Append this line to ~/.bashrc to enable fuzzy auto-completion for Bash:
# source /usr/share/doc/fzf/examples/completion.bash

export PATH=/opt/gradle/bin:${PATH}